AWSTemplateFormatVersion: 2010-09-09
Description: Creates a vpc with server hosting app in private network, with a nginx as a reverse proxy in a public network. for some reason makes 2 instances of app.

Resources:
   # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
        
  
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
       
        
  InstanceSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: Allows all inbound traffic on port 80
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound ssh traffic
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound traffic for app port 3000
        IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - Description: Allows all outbound traffic.
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        
        
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # A NAT Gateway: 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      
  # A DynamoDB Database  
  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Fortunes"      
      AttributeDefinitions: 
        - 
          AttributeName: "fortuneID"
          AttributeType: "N"

      KeySchema: 
        - 
          AttributeName: "fortuneID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
        
  # Network interface for nginx and server instance
  nginxENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: A nice description.
      SourceDestCheck: 'false'
      GroupSet: 
      - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnetA 
    
  nginxWebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-055873b3c4003c528"
      KeyName: "keypairMAY"
      IamInstanceProfile: "DynamoDBfullaccessEC2"
      Monitoring: True
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "8"
      InstanceType: 't2.micro'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref nginxENI
          DeviceIndex: 0 
                
  
  # Network interface for server instance and instance    
  myENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: A nice description.
      SourceDestCheck: 'false'
      GroupSet: 
      - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref PrivateSubnetA   
  
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-055873b3c4003c528"
      KeyName: "keypairMAY"
      IamInstanceProfile: "DynamoDBfullaccessEC2"
      Monitoring: True
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo touch .bash_profile
          sudo yum update -y
          sudo yum install -y git
          cd /home/ec2-user
          sudo mkdir FortuneApp
          cd FortuneApp
          git init
          git pull https://github.com/Andrews-repo/FortuneSite          
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
          nvm install node
          npm install aws-sdk
          npm install express --save
          npm install async --save
          npm install body-parser --save
          npm install ejs --save
          npm install random-number-between --save
          npm install request --save
          npm install pm2 -g --save
          node FortunesItemOps2.js
          pm2 start server.js
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "8"
      InstanceType: 't2.micro'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref myENI
          DeviceIndex: 0 
          
  
  # Laucnh config for auto scaling group
  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: NodeLaunchConfig
      InstanceType: t2.micro
      InstanceId: !Ref WebServer
      KeyName: keypairMAY
      IamInstanceProfile: "DynamoDBfullaccessEC2"
      SecurityGroups: 
       - !Ref InstanceSecurityGroup
  
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myASG
      MinSize: 1
      MaxSize: 6
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref myLaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
      TargetGroupARNs: 
        - !Ref WSTargetGroup
         
  
  CPUScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref myASG
      Cooldown: 300
      EstimatedInstanceWarmup: 180
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
         PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
         TargetValue: 60

  CPUScaleDown:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref myASG
        Cooldown: 60
        ScalingAdjustment: -1

  WSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroups: 
        - !GetAtt InstanceSecurityGroup.GroupId
      Type: application

  WSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref WSTargetGroup
      LoadBalancerArn: !Ref WSLoadBalancer
      Port: 80
      Protocol: HTTP 

  WSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: WSTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: instance
      VpcId: !Ref VPC 
